package edu.cmu.sphinx.decoder.adaptation;

import edu.cmu.sphinx.linguist.acoustic.tiedstate.Sphinx3Loader;

/**
 * Class used for transforming means using a MLLR transform generated by
 * MllrEstimation class.
 * 
 * @author Bogdan Petcu
 */
public class MllrTransformer extends Transformer {

	private Transform transform;

	public MllrTransformer(Sphinx3Loader loader, Transform transform) {
		super(loader);
		this.transform = transform;
	}
	
	protected void transformMean() throws Exception {
		float[] tmean;

		for (int i = 0; i < loader.getNumStates(); i++) {

			for (int j = 0; j < loader.getNumStreams(); j++) {
				tmean = new float[loader.getVectorLength()[j]];

				for (int k = 0; k < loader.getNumGaussiansPerState(); k++) {
					for (int l = 0; l < loader.getVectorLength()[j]; l++) {
						tmean[l] = 0;
						for (int m = 0; m < loader.getVectorLength()[j]; m++) {
							tmean[l] += transform.getA()[j][l][m]
									* loader.getMeansPool()
											.get(i
													* loader.getNumGaussiansPerState()
													+ k)[m];
						}
						tmean[l] += transform.getB()[j][l];
					}

					for (int l = 0; l < loader.getVectorLength()[j]; l++) {
						this.means
								.get(i * loader.getNumGaussiansPerState() + k)[l] = tmean[l];
					}
				}
			}
		}
	}

}
